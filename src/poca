#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2010-2017 Mads Michelsen (mail@brokkr.net)
# This file is part of Poca.
# Poca is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.

"""A cron-friendly command line podcast aggregator"""


from queue import Queue
from time import sleep

import poco


def main():
    '''Main script'''
    # setup
    args = poco.args.get_poca_args()
    stream_logger = poco.loggers.start_streamlogger(args)
    streamfail_logger = poco.loggers.start_streamfaillogger(args)
    conf = poco.config.Config(args, merge_default=True)
    summary_logger = poco.loggers.start_summarylogger(args, conf.paths,
                                                      conf.xml.settings)

    # update loop
    update_threads = []
    update_q = Queue()
    xp_str = './subscription[not(@state="inactive")][title][url]'
    valid_subs = conf.xml.subscriptions.xpath(xp_str)
    for sub in valid_subs:
        thread = poco.subupdate.SubUpdateThread(update_q,
                                                poco.subupdate.SubUpdate,
                                                conf, sub)
        update_threads.append(thread)
        thread.start()
    upgrade_threads = []
    #counter = 0
    while len(upgrade_threads) < len(valid_subs):
        #live_threads = len([t.name for t in upgrade_threads if t.is_alive()])
        #counter += 1
        #print(str(counter).ljust(6), update_q.unfinished_tasks, live_threads)
        while len([t for t in upgrade_threads if t.is_alive()]) < \
                args.threads and not update_q.empty():
            t = poco.subupgrade.SubUpgradeThread(update_q,
                                                 poco.subupgrade.SubUpgrade)
            upgrade_threads.append(t)
            t.start()
            #print('starting new thread')
        sleep(0.1)
    print(update_q.empty())
    for t in upgrade_threads:
        t.join()
    if streamfail_logger.poca_memory_handler:
        if streamfail_logger.poca_memory_handler.buffer:
            print('Here are your deleted files: ')
            streamfail_logger.poca_memory_handler.flush()
    # insert some flushing for streamfail (and emails)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass


    #if summary_logger.poca_email_handler:
    #    summary_logger.poca_email_handler.close()
    #    outcome = summary_logger.poca_email_handler.outcome
    #    if outcome.success is False:
    #        poco.output.conffatal('Email log failed with: ')
    #        poco.output.conffatal('  ' + outcome.msg)
