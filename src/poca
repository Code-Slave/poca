#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2010-2017 Mads Michelsen (mail@brokkr.net)
# This file is part of Poca.
# Poca is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.

"""A cron-friendly command line podcast aggregator"""


import sys
from queue import Queue
from time import sleep
from argparse import Namespace

import poco


def main():
    '''Main script'''
    try:
        # setup
        args = poco.args.get_poca_args()
        stream_logger = poco.loggers.start_streamlogger(args)
        streamfail_logger = poco.loggers.start_streamfaillogger(args)
        conf = poco.config.Config(args, merge_default=True)
        summary_logger = poco.loggers.start_summarylogger(args, conf.paths,
                                                          conf.xml.settings)

        # update loop
        update_threads = []
        update_q = Queue()
        xp_str = './subscription[not(@state="inactive")][title][url]'
        valid_subs = conf.xml.subscriptions.xpath(xp_str)
        for sub in valid_subs:
            update_thread = poco.subupdate.SubUpdateThread(
                update_q, poco.subupdate.SubUpdate, conf, sub)
            update_threads.append(update_thread)
            update_thread.start()

        # upgrade loop
        upgrade_threads = []
        skip_subs = []
        moved_permanently = []
        while len(upgrade_threads) + len(skip_subs) < len(valid_subs):
            while (len([t for t in upgrade_threads if t.is_alive()])
                   < args.threads and not update_q.empty()):
                subdata = update_q.get()
                if subdata.outcome.success:
                    poco.output.subplans(subdata)
                else:
                    poco.output.suberror(subdata)
                if subdata.status in [0, 304, 401, 403, 404, 500, 503]:
                    skip_subs.append(subdata)
                    update_q.task_done()
                    continue
                else:
                    upgrade_thread = poco.subupgrade.SubUpgradeThread(
                        subdata, update_q, poco.subupgrade.SubUpgrade)
                    upgrade_threads.append(upgrade_thread)
                    upgrade_thread.start()
                if subdata.status == 301:
                    moved_permanently.append(subdata)
            sleep(0.5)
        for upgrade_thread in upgrade_threads:
            upgrade_thread.join()

        # fixing 301s by altering the sub url in the config file
        if moved_permanently:
            poco.output.geninfo('')
            conf = poco.config.Config(args, merge_default=True)
            for subdata in moved_permanently:
                pseudo_args = Namespace(title=subdata.sub.title, url=None)
                sub = poco.subscribe.search(conf.xml, pseudo_args)[0]
                sub.url = subdata.new_url
                poco.subscribe.write(conf)
                subdata.outcome = poco.outcome.Outcome(
                    True, 'Updated URL: %s' % subdata.new_url)
                poco.output.suberror(subdata)

        # wrap up
        poco.output.all_fails(args)
        poco.output.email_summary()

    except KeyboardInterrupt:
        for thread in upgrade_threads:
            setattr(thread, "kill", True)
        sys.exit()

if __name__ == '__main__':
    main()
